{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/private/partnerCardQuizz/screens/RegisterScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Button } from '@ui-kitten/components';\nimport { Formik } from 'formik';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Yup from 'yup';\nimport TextField from \"../components/form/TextField\";\nimport { AuthService } from \"../providers/AuthProvider\";\nimport { useModal } from \"../providers/ModalProvider\";\nimport { t } from \"../utils\";\nimport Screen from \"./Screen\";\nvar schema = Yup.object().shape({\n  displayName: Yup.string().required().label(t('register.displayNameLabel')),\n  email: Yup.string().required().email(t('register.emailError')).label(t('register.emailLabel')),\n  password: Yup.string().required().min(6, t('register.passwordError')).label(t('register.passwordLabel'))\n});\nvar initialValues = {\n  displayName: '',\n  email: '',\n  password: ''\n};\nexport default function RegisterScreen() {\n  var _this = this;\n\n  var _useModal = useModal(),\n      showModal = _useModal.showModal;\n\n  var handleFormSubmit = function handleFormSubmit(_ref) {\n    var displayName, email, password, result, message;\n    return _regeneratorRuntime.async(function handleFormSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            displayName = _ref.displayName, email = _ref.email, password = _ref.password;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AuthService.createUserWithEmailAndPassword(email, password));\n\n          case 4:\n            result = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(result.user.updateProfile({\n              displayName: displayName\n            }));\n\n          case 7:\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            message = _context.t0.message;\n            showModal(message);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n\n  return React.createElement(Screen, {\n    title: t('register.title'),\n    showBackIcon: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, React.createElement(Formik, {\n    validationSchema: schema,\n    initialValues: initialValues,\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, function (_ref3) {\n    var handleSubmit = _ref3.handleSubmit,\n        isSubmitting = _ref3.isSubmitting;\n    return React.createElement(React.Fragment, null, React.createElement(TextField, {\n      testID: \"name-input\",\n      name: \"displayName\",\n      style: styles.field,\n      label: t('register.displayNameLabel'),\n      placeholder: t('register.displayNameHint'),\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }), React.createElement(TextField, {\n      testID: \"email-input\",\n      name: \"email\",\n      style: styles.field,\n      label: t('register.emailLabel'),\n      placeholder: t('register.emailHint'),\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }), React.createElement(TextField, {\n      testID: \"password-input\",\n      name: \"password\",\n      style: styles.field,\n      label: t('register.passwordLabel'),\n      placeholder: t('register.passwordHint'),\n      disabled: isSubmitting,\n      password: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }), React.createElement(Button, {\n      style: styles.button,\n      status: \"primary\",\n      onPress: handleSubmit,\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, t('register.submit')));\n  }));\n}\nvar styles = StyleSheet.create({\n  field: {\n    marginBottom: 16\n  },\n  button: {\n    marginTop: 24\n  }\n});","map":{"version":3,"names":["Button","Formik","React","Yup","TextField","AuthService","useModal","t","Screen","schema","object","shape","displayName","string","required","label","email","password","min","initialValues","RegisterScreen","showModal","handleFormSubmit","createUserWithEmailAndPassword","result","user","updateProfile","message","handleSubmit","isSubmitting","styles","field","button","StyleSheet","create","marginBottom","marginTop"],"sources":["/Users/autumn/private/partnerCardQuizz/screens/RegisterScreen.js"],"sourcesContent":["import { Button } from '@ui-kitten/components';\nimport { Formik } from 'formik';\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\nimport * as Yup from 'yup';\nimport TextField from '../components/form/TextField';\nimport { AuthService } from '../providers/AuthProvider';\nimport { useModal } from '../providers/ModalProvider';\nimport { t } from '../utils';\nimport Screen from './Screen';\n\nconst schema = Yup.object().shape({\n  displayName: Yup.string().required().label(t('register.displayNameLabel')),\n  email: Yup.string()\n    .required()\n    .email(t('register.emailError'))\n    .label(t('register.emailLabel')),\n  password: Yup.string()\n    .required()\n    .min(6, t('register.passwordError'))\n    .label(t('register.passwordLabel')),\n});\n\nconst initialValues = {\n  displayName: '',\n  email: '',\n  password: '',\n};\n\nexport default function RegisterScreen() {\n  const { showModal } = useModal();\n  const handleFormSubmit = async ({ displayName, email, password }) => {\n    try {\n      const result = await AuthService.createUserWithEmailAndPassword(\n        email,\n        password,\n      );\n      await result.user.updateProfile({ displayName });\n    } catch ({ message }) {\n      showModal(message);\n    }\n  };\n\n  return (\n    <Screen title={t('register.title')} showBackIcon>\n      <Formik\n        validationSchema={schema}\n        initialValues={initialValues}\n        onSubmit={handleFormSubmit}\n      >\n        {({ handleSubmit, isSubmitting }) => (\n          <>\n            <TextField\n              testID=\"name-input\"\n              name=\"displayName\"\n              style={styles.field}\n              label={t('register.displayNameLabel')}\n              placeholder={t('register.displayNameHint')}\n              disabled={isSubmitting}\n            />\n            <TextField\n              testID=\"email-input\"\n              name=\"email\"\n              style={styles.field}\n              label={t('register.emailLabel')}\n              placeholder={t('register.emailHint')}\n              disabled={isSubmitting}\n            />\n            <TextField\n              testID=\"password-input\"\n              name=\"password\"\n              style={styles.field}\n              label={t('register.passwordLabel')}\n              placeholder={t('register.passwordHint')}\n              disabled={isSubmitting}\n              password\n            />\n            <Button\n              style={styles.button}\n              status=\"primary\"\n              onPress={handleSubmit}\n              disabled={isSubmitting}\n            >\n              {t('register.submit')}\n            </Button>\n          </>\n        )}\n      </Formik>\n    </Screen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  field: {\n    marginBottom: 16,\n  },\n  button: {\n    marginTop: 24,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}